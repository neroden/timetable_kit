#! /usr/bin/env python3
# feed_enhanced.pyi
# Part of timetable_kit
# Copyright 2022, 2023 Nathanael Nerode.  Licensed under GNU Affero GPL v.3 or later.

from collections.abc import Iterable
from dataclasses import dataclass
from typing import Type, Self, Optional

from pandas import DataFrame, Series
from gtfs_kit import Feed  # type: ignore # Tell MyPy this has no type stubs

GTFS_DAYS: tuple[str, str, str, str, str, str, str]

@dataclass
class DateRange:
    """Used to track what dates a timetable is valid for."""

    latest_start_date: str
    earliest_end_date: str

    def is_invalid(self) -> bool:
        ...

    def is_one_day(self) -> bool:
        ...

class FeedEnhanced(Feed):
    dist_units: str
    agency:             Optional[DataFrame] = None
    stops:              Optional[DataFrame] = None
    routes:             Optional[DataFrame] = None
    trips:              Optional[DataFrame] = None
    stop_times:         Optional[DataFrame] = None
    calendar:           Optional[DataFrame] = None
    calendar_dates:     Optional[DataFrame] = None
    fare_attributes:    Optional[DataFrame] = None
    fare_rules:         Optional[DataFrame] = None
    shapes:             Optional[DataFrame] = None
    frequencies:        Optional[DataFrame] = None
    transfers:          Optional[DataFrame] = None
    feed_info:          Optional[DataFrame] = None
    attributions:       Optional[DataFrame] = None

    @classmethod
    def enhance(cls: Type[Self], regular_feed: Feed) -> Self: ...
    def copy(self) -> Self: ...
    def filter_by_dates(self: Self, first_date, last_date) -> Self: ...
    def filter_by_day_of_week(self: Self, day: str) -> Self: ...
    def filter_by_days_of_week(self: Self, days: Iterable[str]) -> Self: ...
    def filter_by_route_ids(self: Self, route_ids) -> Self: ...
    def filter_by_service_ids(self: Self, service_ids) -> Self: ...
    def filter_bad_service_ids(self: Self, bad_service_ids) -> Self: ...
    def filter_remove_one_day_calendars(self: Self) -> Self: ...
    def filter_find_one_day_calendars(self: Self) -> Self: ...
    def filter_by_trip_short_names(self: Self, trip_short_names) -> Self: ...
    def filter_by_trip_ids(self: Self, trip_ids) -> Self: ...
    def get_single_trip(self: Self) -> Series: ...
    def get_single_trip_stop_times(self: Self, trip_id) -> DataFrame: ...
    def get_trip_short_name(self: Self, trip_id) -> str: ...
    def get_valid_date_range(self: Self) -> DateRange: ...
    def get_timepoint_from_trip_id(
        self: Self, trip_id: str, stop_id: str
    ) -> Series: ...
    def get_dwell_secs(self: Self, trip_id: str, stop_id: str) -> int: ...
